<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Product View</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="style.css">
		<style>
			#blocker {
				position: absolute;
				width: 100%;
				height: 100%;
				background-color: rgba(0,0,0,0.5);}
			#instructions {
				width: 100%;
				height: 100%;
      	display: -webkit-box;
				display: -moz-box;
				display: box;
        -webkit-box-orient: horizontal;
				-moz-box-orient: horizontal;
				box-orient: horizontal;
      	-webkit-box-pack: center;
				-moz-box-pack: center;
				box-pack: center;
      	-webkit-box-align: center;
				-moz-box-align: center;
				box-align: center;
        color: #ffffff;
				text-align: center;
				font-family: Arial;
				font-size: 14px;
				line-height: 24px;
      	cursor: pointer;}
		</style>
	</head>
	<body>
		<div id="blocker">
      <div id="instructions">
				<span style="font-size:48px">Click to View</span></div></div>
     <script type="module">
      import * as THREE from 'https://unpkg.com/three@0.126.1/build/three.module.js';
      import { PointerLockControls } from 'https://unpkg.com/three@0.126.1/examples/jsm/controls/PointerLockControls.js';   
      import { GLTFLoader } from 'https://unpkg.com/three@0.126.1/examples/jsm/loaders/GLTFLoader.js';
      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      const product = urlParams.get('product');
	  console.log('MY PRODUCTnnn ' +  product);
      var requestedgltf = '/images/' + product + '.gltf';
      let camera, scene, renderer, controls;
      const objects = [];
      let raycaster;
      let moveForward = false;
			let moveBackward = false;
			let moveLeft = false;
			let moveRight = false;
			let moveUp = false;
			let moveDown = false;
			let canJump = false;
      let prevTime = performance.now();
			const velocity = new THREE.Vector3();
			const direction = new THREE.Vector3();
			const vertex = new THREE.Vector3();
			const color = new THREE.Color();
      init();
			animate();

			function init() {
        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.y = 50;
				camera.position.z = 100;

        scene = new THREE.Scene();
				scene.background = new THREE.Color( 0xffffff );
			  const light = new THREE.HemisphereLight( 0xeeeeff, 0x777788, 0.75 );
				light.position.set( 0.5, 1, 0.75 );
				scene.add( light );
        controls = new PointerLockControls( camera, document.body );
        const blocker = document.getElementById( 'blocker' );
				const instructions = document.getElementById( 'instructions' );
        instructions.addEventListener( 'click', function () {controls.lock();} );
        controls.addEventListener( 'lock', function () {
        instructions.style.display = 'none';
				blocker.style.display = 'none';} );
        controls.addEventListener( 'unlock', function () {
        blocker.style.display = 'block';
				instructions.style.display = '';} );
        scene.add( controls.getObject() );
        const onKeyDown = function ( event ) {
          switch ( event.code ) {

            case 'ArrowUp':
						case 'KeyW':
							moveForward = true;
							break;
            case 'ArrowLeft':
						case 'KeyA':
							moveLeft = true;
							break;
            case 'ArrowDown':
						case 'KeyS':
							moveBackward = true;
							break;
            case 'ArrowRight':
						case 'KeyD':
							moveRight = true;
							break;
            case 'Space':
							if ( canJump === true ) velocity.y += 350;
							canJump = false;
							break;}};
                const onKeyUp = function ( event ) {
					switch ( event.code ) {
            case 'ArrowUp':
						case 'KeyW':
							moveForward = false;
							break;
            case 'ArrowLeft':
						case 'KeyA':
							moveLeft = false;
							break;
            case 'ArrowDown':
						case 'KeyS':
							moveBackward = false;
							break;
          case 'ArrowRight':
						case 'KeyD':
							moveRight = false;
							break;}};
				document.addEventListener( 'keydown', onKeyDown );
				document.addEventListener( 'keyup', onKeyUp );
        raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );
		
              var ldrb = new GLTFLoader();
              ldrb.load(requestedgltf,
                 ( gltf ) => {
                     scene.add(gltf.scene);
                     gltf.scene.scale.set(20, 20, 20);
                     gltf.scene.traverse( function( object ) {
                    scene.add(object);
                     objects.push( object );})},null,null)
        renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );
        window.addEventListener( 'resize', onWindowResize );}

		function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );}

		function animate() {
        requestAnimationFrame( animate );
        const time = performance.now();
        if ( controls.isLocked === true ) {
          raycaster.ray.origin.copy( controls.getObject().position );
					raycaster.ray.origin.y -= 10;
					const intersections = raycaster.intersectObjects( objects );
					const onObject = intersections.length > 0;
					const delta = ( time - prevTime ) / 1000;
					velocity.x -= velocity.x * 10.0 * delta;
					velocity.z -= velocity.z * 10.0 * delta;
					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.x = Number( moveRight ) - Number( moveLeft );
					direction.normalize(); // this ensures consistent movements in all directions
					if ( moveForward || moveBackward ) velocity.z -= direction.z * 400.0 * delta;
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 400.0 * delta;
					if ( onObject === true ) {
						velocity.y = Math.max( 0, velocity.y );
						canJump = true;}
					controls.moveRight( - velocity.x * delta );
					controls.moveForward( - velocity.z * delta );
					controls.getObject().position.y += ( velocity.y * delta ); // new behavior
					if ( controls.getObject().position.y < 10 ) {
						velocity.y = 0;
						controls.getObject().position.y = 10;
						canJump = true;}
					}
				prevTime = time;
				renderer.render( scene, camera );}
		</script>
</body>
</html>
